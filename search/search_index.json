{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Documentation: https://commitizen-tools.github.io/commitizen/</p>"},{"location":"#about","title":"About","text":"<p>Commitizen is a tool designed for teams.</p> <p>Its main purpose is to define a standard way of committing rules and communicating it (using the cli provided by commitizen).</p> <p>The reasoning behind it is that it is easier to read, and enforces writing descriptive commits.</p> <p>Besides that, having a convention on your commits makes it possible to parse them and use them for something else, like generating automatically the version or a changelog.</p>"},{"location":"#commitizen-features","title":"Commitizen features","text":"<ul> <li>Command-line utility to create commits with your rules. Defaults: Conventional commits</li> <li>Display information about your commit rules (commands: schema, example, info)</li> <li>Bump version automatically using semantic versioning based on the commits. Read More</li> <li>Generate a changelog using Keep a changelog</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<p>Python 3.6+</p> <p>Git <code>1.8.5.2</code>+</p>"},{"location":"#installation","title":"Installation","text":"<p>Global installation</p> <pre><code>sudo pip3 install -U Commitizen\n</code></pre>"},{"location":"#python-project","title":"Python project","text":"<p>You can add it to your local project using one of these:</p> <pre><code>pip install -U commitizen\n</code></pre> <p>for Poetry &gt;= 1.2.0:</p> <pre><code>poetry add commitizen --group dev\n</code></pre> <p>for Poetry &lt; 1.2.0:</p> <pre><code>poetry add commitizen --dev\n</code></pre>"},{"location":"#macos","title":"macOS","text":"<p>On macOS, it can also be installed via homebrew:</p> <pre><code>brew install commitizen\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#committing","title":"Committing","text":"<p>Run in your terminal</p> <pre><code>cz commit\n</code></pre> <p>or the shortcut</p> <pre><code>cz c\n</code></pre>"},{"location":"#sign-off-the-commit","title":"Sign off the commit","text":"<p>Run in the terminal</p> <pre><code>cz commit --signoff\n</code></pre> <p>or the shortcut</p> <pre><code>cz commit -s\n</code></pre>"},{"location":"#integrating-with-pre-commit","title":"Integrating with Pre-commit","text":"<p>Commitizen can lint your commit message for you with <code>cz check</code>.</p> <p>You can integrate this in your pre-commit config with:</p> <pre><code>---\nrepos:\n- repo: https://github.com/commitizen-tools/commitizen\nrev: master\nhooks:\n- id: commitizen\n- id: commitizen-branch\nstages: [push]\n</code></pre> <p>After the configuration is added, you'll need to run:</p> <pre><code>pre-commit install --hook-type commit-msg --hook-type pre-push\n</code></pre> <p>If you aren't using both hooks, you needn't install both stages.</p> Hook Recommended Stage commitizen commit-msg commitizen-branch pre-push <p>Note that pre-commit discourages using <code>master</code> as a revision, and the above command will print a warning. You should replace the <code>master</code> revision with the latest tag. This can be done automatically with:</p> <pre><code>pre-commit autoupdate\n</code></pre> <p>Read more about the <code>check</code> command here.</p>"},{"location":"#help","title":"Help","text":"<pre><code>$ cz --help\nusage: cz [-h] [--debug] [-n NAME] [-nr NO_RAISE] {init,commit,c,ls,example,info,schema,bump,changelog,ch,check,version} ...\n\nCommitizen is a cli tool to generate conventional commits.\nFor more information about the topic go to https://conventionalcommits.org/\n\noptional arguments:\n  -h, --help            show this help message and exit\n--debug               use debug mode\n  -n NAME, --name NAME  use the given commitizen (default: cz_conventional_commits)\n-nr NO_RAISE, --no-raise NO_RAISE\n                        comma separated error codes that won't rise error, e.g: cz -nr 1,2,3 bump. See codes at https://commitizen-\n                        tools.github.io/commitizen/exit_codes/\n\ncommands:\n  {init,commit,c,ls,example,info,schema,bump,changelog,ch,check,version}\ninit                init commitizen configuration\n    commit (c)          create new commit\n    ls                  show available commitizens\n    example             show commit example\n    info                show information about the cz\n    schema              show commit schema\n    bump                bump semantic version based on the git log\n    changelog (ch)      generate changelog (note that it will overwrite existing file)\ncheck               validates that a commit message matches the commitizen schema\n    version             get the version of the installed commitizen or the current project (default: installed commitizen)\n</code></pre>"},{"location":"#setting-up-bash-completion","title":"Setting up bash completion","text":"<p>When using bash as your shell (limited support for zsh, fish, and tcsh is available), Commitizen can use argcomplete for auto-completion. For this argcomplete needs to be enabled.</p> <p>argcomplete is installed when you install Commitizen since it's a dependency.</p> <p>If Commitizen is installed globally, global activation can be executed:</p> <pre><code>sudo activate-global-python-argcomplete\n</code></pre> <p>For permanent (but not global) Commitizen activation, use:</p> <pre><code>register-python-argcomplete cz &gt;&gt; ~/.bashrc\n</code></pre> <p>For one-time activation of argcomplete for Commitizen only, use:</p> <pre><code>eval \"$(register-python-argcomplete cz)\"\n</code></pre> <p>For further information on activation, please visit the argcomplete website.</p>"},{"location":"auto_check/","title":"Automatically check message before commit","text":""},{"location":"auto_check/#about","title":"About","text":"<p>To automatically check a commit message prior to committing, you can use a git hook.</p>"},{"location":"auto_check/#how-to","title":"How to","text":"<p>There are two common methods for installing the hook:</p>"},{"location":"auto_check/#method-1-add-git-hook-through-pre-commit","title":"Method 1: Add git hook through pre-commit","text":"<ul> <li>Step 1: Install pre-commit</li> </ul> <pre><code>python -m pip install pre-commit\n</code></pre> <ul> <li>Step 2: Create <code>.pre-commit-config.yaml</code> at your root directory with the following content</li> </ul> <pre><code>---\nrepos:\n- repo: https://github.com/commitizen-tools/commitizen\nrev: v1.17.0\nhooks:\n- id: commitizen\n</code></pre> <ul> <li>Step 3: Install the configuration into git hook through <code>pre-commit</code></li> </ul> <pre><code>pre-commit install --hook-type commit-msg\n</code></pre>"},{"location":"auto_check/#method-2-manually-add-git-hook","title":"Method 2: Manually add git hook","text":"<p>The command might be included inside of a Git hook (inside of <code>.git/hooks/</code> at the root of the project).</p> <p>The selected hook might be the file called commit-msg.</p> <p>This example shows how to use the check command inside of commit-msg.</p> <p>At the root of the project:</p> <pre><code>cd .git/hooks\ntouch commit-msg\nchmod +x commit-msg\n</code></pre> <p>Open the file and edit it:</p> <pre><code>#!/bin/bash\nMSG_FILE=$1\ncz check --allow-abort --commit-msg-file $MSG_FILE\n</code></pre> <p>Where <code>$1</code> is the name of the temporary file that contains the current commit message. To be more explicit, the previous variable is stored in another variable called <code>$MSG_FILE</code>, for didactic purposes.</p> <p>The <code>--commit-msg-file</code> flag is required, not optional.</p> <p>Each time you create a commit, automatically, this hook will analyze it. If the commit message is invalid, it'll be rejected.</p> <p>The commit should follow the given committing rules; otherwise, it won't be accepted.</p>"},{"location":"bump/","title":"Bump","text":""},{"location":"bump/#about","title":"About","text":"<p>The version is bumped automatically based on the commits.</p> <p>The commits should follow the rules of the committer to be parsed correctly.</p> <p>It is possible to specify a prerelease (alpha, beta, release candidate) version.</p> <p>The version can also be manually bumped.</p> <p>The version format follows semantic versioning.</p> <p>This means <code>MAJOR.MINOR.PATCH</code></p> Increment Description Conventional commit map <code>MAJOR</code> Breaking changes introduced <code>BREAKING CHANGE</code> <code>MINOR</code> New features <code>feat</code> <code>PATCH</code> Fixes <code>fix</code> + everything else <p>Prereleases are supported following python's PEP 0440</p> <p>The scheme of this format is</p> <pre><code>[N!]N(.N)*[{a|b|rc}N][.postN][.devN]\n</code></pre> <p>Some examples:</p> <pre><code>0.9.0\n0.9.1\n0.9.2\n0.9.10\n0.9.11\n1.0.0a0  # alpha\n1.0.0a1\n1.0.0b0  # beta\n1.0.0rc0 # release candidate\n1.0.0rc1\n1.0.0\n1.0.1\n1.1.0\n2.0.0\n2.0.1a\n</code></pre> <p><code>post</code> releases are not supported yet.</p>"},{"location":"bump/#usage","title":"Usage","text":"<pre><code>$ cz bump --help\nusage: cz bump [-h] [--dry-run] [--files-only] [--local-version] [--changelog]\n[--no-verify] [--yes] [--tag-format TAG_FORMAT]\n[--bump-message BUMP_MESSAGE] [--prerelease {alpha,beta,rc}]\n[--devrelease DEVRELEASE] [--increment {MAJOR,MINOR,PATCH}]\n[--check-consistency] [--annotated-tag] [--gpg-sign]\n[--changelog-to-stdout] [--retry] [--major-version-zero]\n[MANUAL_VERSION]\n\npositional arguments:\n  MANUAL_VERSION        bump to the given version (e.g: 1.5.3)\n\noptions:\n  -h, --help            show this help message and exit\n--dry-run             show output to stdout, no commit, no modified files\n  --files-only          bump version in the files from the config\n  --local-version       bump only the local version portion\n  --changelog, -ch      generate the changelog for the newest version\n  --no-verify           this option bypasses the pre-commit and commit-msg\n                        hooks\n  --yes                 accept automatically questions done\n--tag-format TAG_FORMAT\n                        the format used to tag the commit and read it, use it\n                        in existing projects, wrap around simple quotes\n  --bump-message BUMP_MESSAGE\n                        template used to create the release commit, useful\n                        when working with CI\n  --prerelease {alpha,beta,rc}, -pr {alpha,beta,rc}\nchoose type of prerelease\n  --devrelease DEVRELEASE, -d DEVRELEASE\n                        specify non-negative integer for dev. release\n  --increment {MAJOR,MINOR,PATCH}\nmanually specify the desired increment\n  --check-consistency, -cc\n                        check consistency among versions defined in commitizen\n                        configuration and version_files\n  --annotated-tag, -at  create annotated tag instead of lightweight one\n  --gpg-sign, -s        sign tag instead of lightweight one\n  --changelog-to-stdout\n                        Output changelog to the stdout\n  --retry               retry commit if it fails the 1st time\n--major-version-zero  keep major version at zero, even for breaking changes\n</code></pre>"},{"location":"bump/#-files-only","title":"<code>--files-only</code>","text":"<p>Bumps the version in the files defined in <code>version_files</code> without creating a commit and tag on the git repository,</p> <pre><code>cz bump --files-only\n</code></pre>"},{"location":"bump/#-changelog","title":"<code>--changelog</code>","text":"<p>Generate a changelog along with the new version and tag when bumping.</p> <pre><code>cz bump --changelog\n</code></pre>"},{"location":"bump/#-check-consistency","title":"<code>--check-consistency</code>","text":"<p>Check whether the versions defined in <code>version_files</code> and the version in commitizen configuration are consistent before bumping version.</p> <pre><code>cz bump --check-consistency\n</code></pre> <p>For example, if we have <code>pyproject.toml</code></p> <pre><code>[tool.commitizen]\nversion = \"1.21.0\"\nversion_files = [\n\"src/__version__.py\",\n\"setup.py\",\n]\n</code></pre> <p><code>src/__version__.py</code>,</p> <pre><code>__version__ = \"1.21.0\"\n</code></pre> <p>and <code>setup.py</code>.</p> <pre><code>...\n    version=\"1.0.5\"\n...\n</code></pre> <p>If <code>--check-consistency</code> is used, commitizen will check whether the current version in <code>pyproject.toml</code> exists in all version_files and find out it does not exist in <code>setup.py</code> and fails. However, it will still update <code>pyproject.toml</code> and <code>src/__version__.py</code>.</p> <p>To fix it, you'll first <code>git checkout .</code> to reset to the status before trying to bump and update the version in <code>setup.py</code> to <code>1.21.0</code></p>"},{"location":"bump/#-local-version","title":"<code>--local-version</code>","text":"<p>Bump the local portion of the version.</p> <pre><code>cz bump --local-version\n</code></pre> <p>For example, if we have <code>pyproject.toml</code></p> <pre><code>[tool.commitizen]\nversion = \"5.3.5+0.1.0\"\n</code></pre> <p>If <code>--local-version</code> is used, it will bump only the local version <code>0.1.0</code> and keep the public version <code>5.3.5</code> intact, bumping to the version <code>5.3.5+0.2.0</code>.</p>"},{"location":"bump/#-annotated-tag","title":"<code>--annotated-tag</code>","text":"<p>If <code>--annotated-tag</code> is used, commitizen will create annotated tags. Also available via configuration, in <code>pyproject.toml</code> or <code>.cz.toml</code>.</p>"},{"location":"bump/#-changelog-to-stdout","title":"<code>--changelog-to-stdout</code>","text":"<p>If <code>--changelog-to-stdout</code> is used, the incremental changelog generated by the bump will be sent to the stdout, and any other message generated by the bump will be sent to stderr.</p> <p>If <code>--changelog</code> is not used with this command, it is still smart enough to understand that the user wants to create a changelog. It is recommened to be explicit and use <code>--changelog</code> (or the setting <code>update_changelog_on_bump</code>).</p> <p>This command is useful to \"transport\" the newly created changelog. It can be sent to an auditing system, or to create a Github Release.</p> <p>Example:</p> <pre><code>cz bump --changelog --changelog-to-stdout &gt; body.md\n</code></pre>"},{"location":"bump/#-retry","title":"<code>--retry</code>","text":"<p>If you use tools like pre-commit, add this flag. It will retry the commit if it fails the 1st time.</p> <p>Useful to combine with code formatters, like Prettier.</p>"},{"location":"bump/#-major-version-zero","title":"<code>--major-version-zero</code>","text":"<p>A project in its initial development should have a major version zero, and even breaking changes should not bump that major version from zero. This command ensures that behavior.</p> <p>If <code>--major-version-zero</code> is used for projects that have a version number greater than zero it fails. If used together with a manual version the command also fails.</p> <p>We recommend setting <code>major_version_zero = true</code> in your configuration file while a project is in its initial development. Remove that configuration using a breaking-change commit to bump your project\u2019s major version to <code>v1.0.0</code> once your project has reached maturity.</p>"},{"location":"bump/#avoid-raising-errors","title":"Avoid raising errors","text":"<p>Some situations from commitizen rise an exit code different than 0. If the error code is different than 0, any CI or script running commitizen might be interrupted.</p> <p>If you have special use case, where you don't want one of this error codes to be raised, you can tell commitizen to not raise them.</p>"},{"location":"bump/#recommended-use-case","title":"Recommended use case","text":"<p>At the moment, we've identified that the most common error code to skip is</p> Error name Exit code NoneIncrementExit 21 <p>There are some situations where you don't want to get an error code when some commits do not match your rules, you just want those commits to be skipped.</p> <pre><code>cz -nr 21 bump\n</code></pre>"},{"location":"bump/#easy-way","title":"Easy way","text":"<p>Check which error code was raised by commitizen by running in the terminal</p> <pre><code>echo $?\n</code></pre> <p>The output should be an integer like this</p> <pre><code>3\n</code></pre> <p>And then you can tell commitizen to ignore it:</p> <pre><code>cz --no-raise 3\n</code></pre> <p>You can tell commitizen to skip more than one if needed:</p> <pre><code>cz --no-raise 3,4,5\n</code></pre>"},{"location":"bump/#longer-way","title":"Longer way","text":"<p>Check the list of exit_codes and understand which one you have to skip and why.</p> <p>Remember to document somewhere this, because you'll forget.</p> <p>For example if the system raises a <code>NoneIncrementExit</code> error, you look it up on the list and then you can use the exit code:</p> <pre><code>cz -nr 21 bump\n</code></pre>"},{"location":"bump/#configuration","title":"Configuration","text":""},{"location":"bump/#tag_format","title":"<code>tag_format</code>","text":"<p>It is used to read the format from the git tags, and also to generate the tags.</p> <p>Commitizen supports 2 types of formats, a simple and a more complex.</p> <pre><code>cz bump --tag-format=\"v$version\"\n</code></pre> <pre><code>cz bump --tag-format=\"v$minor.$major.$patch$prerelease.$devrelease\"\n</code></pre> <p>In your <code>pyproject.toml</code> or <code>.cz.toml</code></p> <pre><code>[tool.commitizen]\ntag_format = \"v$major.$minor.$patch$prerelease\"\n</code></pre> <p>The variables must be preceded by a <code>$</code> sign.</p> <p>Supported variables:</p> Variable Description <code>$version</code> full generated version <code>$major</code> MAJOR increment <code>$minor</code> MINOR increment <code>$patch</code> PATCH increment <code>$prerelease</code> Prerelease (alpha, beta, release candidate) <code>$devrelease</code> Development release"},{"location":"bump/#version_files","title":"<code>version_files</code> *","text":"<p>It is used to identify the files which should be updated with the new version. It is also possible to provide a pattern for each file, separated by colons (<code>:</code>).</p> <p>Commitizen will update it's configuration file automatically (<code>pyproject.toml</code>, <code>.cz</code>) when bumping, regarding if the file is present or not in <code>version_files</code>.</p> <p>* Renamed from <code>files</code> to <code>version_files</code>.</p> <p>Some examples</p> <p><code>pyproject.toml</code> or <code>.cz.toml</code></p> <pre><code>[tool.commitizen]\nversion_files = [\n\"src/__version__.py\",\n\"setup.py:version\"\n]\n</code></pre> <p>In the example above, we can see the reference <code>\"setup.py:version\"</code>. This means that it will find a file <code>setup.py</code> and will only make a change in a line containing the <code>version</code> substring.</p>"},{"location":"bump/#bump_message","title":"<code>bump_message</code>","text":"<p>Template used to specify the commit message generated when bumping.</p> <p>defaults to: <code>bump: version $current_version \u2192 $new_version</code></p> Variable Description <code>$current_version</code> the version existing before bumping <code>$new_version</code> version generated after bumping <p>Some examples</p> <p><code>pyproject.toml</code> or <code>.cz.toml</code></p> <pre><code>[tool.commitizen]\nbump_message = \"release $current_version \u2192 $new_version [skip-ci]\"\n</code></pre>"},{"location":"bump/#update_changelog_on_bump","title":"<code>update_changelog_on_bump</code>","text":"<p>When set to <code>true</code> the changelog is always updated incrementally when running <code>cz bump</code>, so the user does not have to provide the <code>--changelog</code> flag every time.</p> <p>defaults to: <code>false</code></p> <pre><code>[tool.commitizen]\nupdate_changelog_on_bump = true\n</code></pre>"},{"location":"bump/#annotated_tag","title":"<code>annotated_tag</code>","text":"<p>When set to <code>true</code> commitizen will create annotated tags.</p> <pre><code>[tool.commitizen]\nannotated_tag = true\n</code></pre>"},{"location":"bump/#gpg_sign","title":"<code>gpg_sign</code>","text":"<p>When set to <code>true</code> commitizen will create gpg signed tags.</p> <pre><code>[tool.commitizen]\ngpg_sign = true\n</code></pre>"},{"location":"bump/#major_version_zero","title":"<code>major_version_zero</code>","text":"<p>When set to <code>true</code> commitizen will keep the major version at zero. Useful during the initial development stage of your project.</p> <p>Defaults to: <code>false</code></p> <pre><code>[tool.commitizen]\nmajor_version_zero = true\n</code></pre>"},{"location":"bump/#custom-bump","title":"Custom bump","text":"<p>Read the customizing section.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#about","title":"About","text":"<p>This command will generate a changelog following the committing rules established.</p>"},{"location":"changelog/#usage","title":"Usage","text":"<pre><code>$ cz changelog --help\nusage: cz changelog [-h] [--dry-run] [--file-name FILE_NAME] [--unreleased-version UNRELEASED_VERSION] [--incremental] [--start-rev START_REV]\n[rev_range]\n\npositional arguments:\n  rev_range             generates changelog for the given version (e.g: 1.5.3) or version range (e.g: 1.5.3..1.7.9)\n\noptional arguments:\n  -h, --help            show this help message and exit\n--dry-run             show changelog to stdout\n  --file-name FILE_NAME\n                        file name of changelog (default: 'CHANGELOG.md')\n--unreleased-version UNRELEASED_VERSION\n                        set the value for the new version (use the tag value), instead of using unreleased\n  --incremental         generates changelog from last created version, useful if the changelog has been manually modified\n  --start-rev START_REV\n                        start rev of the changelog.If not set, it will generate changelog from the start\n</code></pre>"},{"location":"changelog/#examples","title":"Examples","text":""},{"location":"changelog/#generate-full-changelog","title":"Generate full changelog","text":"<pre><code>cz changelog\n</code></pre> <pre><code>cz ch\n</code></pre>"},{"location":"changelog/#get-the-changelog-for-the-given-version","title":"Get the changelog for the given version","text":"<pre><code>cz changelog 0.3.0\n</code></pre>"},{"location":"changelog/#get-the-changelog-for-the-given-version-range","title":"Get the changelog for the given version range","text":"<pre><code>cz changelog 0.3.0..0.4.0\n</code></pre>"},{"location":"changelog/#constrains","title":"Constrains","text":"<p>changelog generation is constrained only to markdown files.</p>"},{"location":"changelog/#description","title":"Description","text":"<p>These are the variables used by the changelog generator.</p> <pre><code># &lt;version&gt; (&lt;date&gt;)\n\n## &lt;change_type&gt;\n\n- **&lt;scope&gt;**: &lt;message&gt;\n</code></pre> <p>It will create a full block like above per version found in the tags. And it will create a list of the commits found. The <code>change_type</code> and the <code>scope</code> are optional, they don't need to be provided, but if your regex does they will be rendered.</p> <p>The format followed by the changelog is the one from keep a changelog and the following variables are expected:</p> Variable Description Source <code>version</code> Version number which should follow semver <code>tags</code> <code>date</code> Date in which the tag was created <code>tags</code> <code>change_type</code> The group where the commit belongs to, this is optional. Example: fix <code>commit regex</code> <code>message</code>* Information extracted from the commit message <code>commit regex</code> <code>scope</code> Contextual information. Should be parsed using the regex from the message, it will be bold <code>commit regex</code> <code>breaking</code> Whether is a breaking change or not <code>commit regex</code> <ul> <li>required: is the only one required to be parsed by the regex</li> </ul>"},{"location":"changelog/#configuration","title":"Configuration","text":""},{"location":"changelog/#unreleased_version","title":"<code>unreleased_version</code>","text":"<p>There is usually a chicken and egg situation when automatically bumping the version and creating the changelog. If you bump the version first, you have no changelog, you have to create it later, and it won't be included in the release of the created version.</p> <p>If you create the changelog before bumping the version, then you usually don't have the latest tag, and the Unreleased title appears.</p> <p>By introducing <code>unreleased_version</code> you can prevent this situation.</p> <p>Before bumping you can run:</p> <pre><code>cz changelog --unreleased-version=\"v1.0.0\"\n</code></pre> <p>Remember to use the tag instead of the raw version number</p> <p>For example if the format of your tag includes a <code>v</code> (<code>v1.0.0</code>), then you should use that, if your tag is the same as the raw version, then ignore this.</p> <p>Alternatively you can directly bump the version and create the changelog by doing</p> <pre><code>cz bump --changelog\n</code></pre>"},{"location":"changelog/#file-name","title":"<code>file-name</code>","text":"<p>This value can be updated in the <code>toml</code> file with the key <code>changelog_file</code> under <code>tools.commitizen</code></p> <p>Specify the name of the output file, remember that changelog only works with markdown.</p> <pre><code>cz changelog --file-name=\"CHANGES.md\"\n</code></pre>"},{"location":"changelog/#incremental","title":"<code>incremental</code>","text":"<p>This flag can be set in the <code>toml</code> file with the key <code>changelog_incremental</code> under <code>tools.commitizen</code></p> <p>Benefits:</p> <ul> <li>Build from latest version found in changelog, this is useful if you have a different changelog and want to use commitizen</li> <li>Update unreleased area</li> <li>Allows users to manually touch the changelog without being rewritten.</li> </ul> <pre><code>cz changelog --incremental\n</code></pre> <pre><code>[tools.commitizen]\n# ...\nchangelog_incremental = true\n</code></pre>"},{"location":"changelog/#start-rev","title":"<code>start-rev</code>","text":"<p>This value can be set in the <code>toml</code> file with the key <code>changelog_start_rev</code> under <code>tools.commitizen</code></p> <p>Start from a given git rev to generate the changelog. Commits before that rev will not be considered. This is especially useful for long-running projects adopting conventional commits, where old commit messages might fail to be parsed for changelog generation.</p> <pre><code>cz changelog --start-rev=\"v0.2.0\"\n</code></pre> <pre><code>[tools.commitizen]\n# ...\nchangelog_start_rev = \"v0.2.0\"\n</code></pre>"},{"location":"changelog/#hooks","title":"Hooks","text":"<p>Supported hook methods:</p> <ul> <li>per parsed message: useful to add links</li> <li>end of changelog generation: useful to send slack or chat message, or notify another department</li> </ul> <p>Read more about hooks in the customization page</p>"},{"location":"check/","title":"Check","text":""},{"location":"check/#about","title":"About","text":"<p>This feature checks whether the commit message follows the given committing rules. And comment in git message will be ignored.</p> <p>If you want to setup an automatic check before every git commit, please refer to Automatically check message before commit.</p>"},{"location":"check/#usage","title":"Usage","text":"<p>There are three mutually exclusive ways to use <code>cz check</code>:</p> <ul> <li>with <code>--rev-range</code> to check a range of pre-existing commits</li> <li>with <code>--message</code> or by piping the message to it to check a given string</li> <li>or with <code>--commit-msg-file</code> to read the commit message from a file</li> </ul>"},{"location":"check/#git-rev-range","title":"Git Rev Range","text":"<p>If you'd like to check a commit's message after it has already been created, then you can specify the range of commits to check with <code>--rev-range REV_RANGE</code>.</p> <pre><code>$ cz check --rev-range REV_RANGE\n</code></pre> <p>For example, if you'd like to check all commits on a branch, you can use <code>--rev-range master..HEAD</code>. Or, if you'd like to check all commits starting from when you first implemented commit message linting, you can use <code>--rev-range &lt;first_commit_sha&gt;..HEAD</code>.</p> <p>For more info on how git commit ranges work, you can check the git documentation.</p>"},{"location":"check/#commit-message","title":"Commit Message","text":"<p>There are two ways you can provide your plain message and check it.</p>"},{"location":"check/#method-1-use-m-or-message","title":"Method 1: use -m or --message","text":"<pre><code>$ cz check --message MESSAGE\n</code></pre> <p>In this option, MESSAGE is the commit message to be checked.</p>"},{"location":"check/#method-2-use-pipe-to-pipe-it-to-cz-check","title":"Method 2: use pipe to pipe it to <code>cz check</code>","text":"<pre><code>$ echo MESSAGE | cz check\n</code></pre> <p>In this option, MESSAGE is piped to cz check and would be checked.</p>"},{"location":"check/#commit-message-file","title":"Commit Message File","text":"<pre><code>$ cz check --commit-msg-file COMMIT_MSG_FILE\n</code></pre> <p>In this option, COMMIT_MSG_FILE is the path of the temporal file that contains the commit message. This argument can be useful when cooperating with git hook, please check Automatically check message before commit for more information about how to use this argument with git hook.</p>"},{"location":"check/#allow-abort","title":"Allow Abort","text":"<pre><code>cz check --message MESSAGE --allow-abort\n</code></pre> <p>Empty commit messages typically instruct Git to abort a commit, so you can pass <code>--allow-abort</code> to permit them. Since <code>git commit</code> accepts an <code>--allow-empty-message</code> flag (primarily for wrapper scripts), you may wish to disallow such commits in CI. <code>--allow-abort</code> may be used in conjunction with any of the other options.</p>"},{"location":"commit/","title":"Commit","text":""},{"location":"commit/#about","title":"About","text":"<p>In your terminal run <code>cz commit</code> or the shortcut <code>cz c</code> to generate a guided git commit.</p> <p>A commit can be signed off using <code>cz commit --signoff</code> or the shortcut <code>cz commit -s</code>.</p> <p>Note</p> <p>To maintain platform compatibility, the <code>commit</code> command disable ANSI escaping in its output. In particular pre-commit hooks coloring will be deactivated as discussed in commitizen-tools/commitizen#417.</p>"},{"location":"config/","title":"Configuration","text":""},{"location":"config/#settings","title":"Settings","text":"Variable Type Default Description <code>name</code> <code>str</code> <code>\"cz_conventional_commits\"</code> Name of the committing rules to use <code>version</code> <code>str</code> <code>None</code> Current version. Example: \"0.1.2\" <code>version_files</code> <code>list</code> <code>[ ]</code> Files were the version will be updated. A pattern to match a line, can also be specified, separated by <code>:</code> See more <code>tag_format</code> <code>str</code> <code>None</code> Format for the git tag, useful for old projects, that use a convention like <code>\"v1.2.1\"</code>. See more <code>update_changelog_on_bump</code> <code>bool</code> <code>false</code> Create changelog when running <code>cz bump</code> <code>gpg_sign</code> <code>bool</code> <code>false</code> Use gpg signed tags instead of lightweight tags. <code>annotated_tag</code> <code>bool</code> <code>false</code> Use annotated tags instead of lightweight tags. See difference <code>bump_message</code> <code>str</code> <code>None</code> Create custom commit message, useful to skip ci. See more <code>allow_abort</code> <code>bool</code> <code>false</code> Disallow empty commit messages, useful in ci. See more <code>changelog_file</code> <code>str</code> <code>CHANGELOG.md</code> filename of exported changelog <code>changelog_incremental</code> <code>bool</code> <code>false</code> Update changelog with the missing versions. This is good if you don't want to replace previous versions in the file. Note: when doing <code>cz bump --changelog</code> this is automatically set to <code>true</code> <code>changelog_start_rev</code> <code>str</code> <code>None</code> Start from a given git rev to generate the changelog <code>style</code> <code>list</code> see above Style for the prompts (It will merge this value with default style.) See More (Styling your prompts with your favorite colors) <code>customize</code> <code>dict</code> <code>None</code> This is only supported when config through <code>toml</code>. Custom rules for committing and bumping. See more <code>use_shortcuts</code> <code>bool</code> <code>false</code> If enabled, commitizen will show keyboard shortcuts when selecting from a list. Define a <code>key</code> for each of your choices to set the key. See more <code>major_version_zero</code> <code>bool</code> <code>false</code> When true, breaking changes on a <code>0.x</code> will remain as a <code>0.x</code> version. On <code>false</code>, a breaking change will bump a <code>0.x</code> version to <code>1.0</code>. major-version-zero"},{"location":"config/#pyprojecttoml-or-cztoml","title":"pyproject.toml or .cz.toml","text":"<p>Default and recommended configuration format for a project. For a python project, we recommend adding an entry to your <code>pyproject.toml</code>. You can also create a <code>.cz.toml</code> file at the root of your project folder.</p> <p>Example configuration:</p> <pre><code>[tool.commitizen]\nname = \"cz_conventional_commits\"\nversion = \"0.1.0\"\nversion_files = [\n\"src/__version__.py\",\n\"pyproject.toml:version\"\n]\nstyle = [\n[\"qmark\", \"fg:#ff9d00 bold\"],\n[\"question\", \"bold\"],\n[\"answer\", \"fg:#ff9d00 bold\"],\n[\"pointer\", \"fg:#ff9d00 bold\"],\n[\"highlighted\", \"fg:#ff9d00 bold\"],\n[\"selected\", \"fg:#cc5454\"],\n[\"separator\", \"fg:#cc5454\"],\n[\"instruction\", \"\"],\n[\"text\", \"\"],\n[\"disabled\", \"fg:#858585 italic\"]\n]\n</code></pre>"},{"location":"config/#czjson-or-czjson","title":".cz.json or cz.json","text":"<p>Commitizen has support for JSON configuration. Recommended for <code>NodeJS</code> projects.</p> <pre><code>{\n\"commitizen\": {\n\"name\": \"cz_conventional_commits\",\n\"version\": \"0.1.0\",\n\"version_files\": [\"src/__version__.py\", \"pyproject.toml:version\"],\n\"style\": [\n[\"qmark\", \"fg:#ff9d00 bold\"],\n[\"question\", \"bold\"],\n[\"answer\", \"fg:#ff9d00 bold\"],\n[\"pointer\", \"fg:#ff9d00 bold\"],\n[\"highlighted\", \"fg:#ff9d00 bold\"],\n[\"selected\", \"fg:#cc5454\"],\n[\"separator\", \"fg:#cc5454\"],\n[\"instruction\", \"\"],\n[\"text\", \"\"],\n[\"disabled\", \"fg:#858585 italic\"]\n]\n}\n}\n</code></pre>"},{"location":"config/#czyaml-or-czyaml","title":".cz.yaml or cz.yaml","text":"<p>YAML configuration is supported by Commitizen. Recommended for <code>Go</code>, <code>ansible</code>, or even <code>helm</code> charts projects.</p> <pre><code>commitizen:\nname: cz_conventional_commits\nversion: 0.1.0\nversion_files:\n- src/__version__.py\n- pyproject.toml:version\nstyle:\n- - qmark\n- fg:#ff9d00 bold\n- - question\n- bold\n- - answer\n- fg:#ff9d00 bold\n- - pointer\n- fg:#ff9d00 bold\n- - highlighted\n- fg:#ff9d00 bold\n- - selected\n- fg:#cc5454\n- - separator\n- fg:#cc5454\n- - instruction\n- \"\"\n- - text\n- \"\"\n- - disabled\n- fg:#858585 italic\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing-to-commitizen","title":"Contributing to commitizen","text":"<p>First of all, thank you for taking the time to contribute! \ud83c\udf89</p> <p>When contributing to commitizen, please first create an issue to discuss the change you wish to make before making a change.</p> <p>If you're a first-time contributor, you can check the issues with good first issue tag.</p>"},{"location":"contributing/#before-making-a-pull-request","title":"Before making a pull request","text":"<ol> <li>Fork the repository.</li> <li>Clone the repository from your GitHub.</li> <li>Setup development environment through poetry (<code>poetry install</code>).</li> <li>Setup pre-commit hook (<code>pre-commit install -t pre-commit -t pre-push -t commit-msg</code>)</li> <li>Check out a new branch and add your modification.</li> <li>Add test cases for all your changes.    (We use CodeCov to ensure our test coverage does not drop.)</li> <li>Use commitizen to do git commit. We follow conventional commmits</li> <li>Run <code>./scripts/format</code> and <code>./scripts/test</code> to ensure you follow the coding style and the tests pass.</li> <li>Update <code>README.md</code>. Do not update the <code>CHANGELOG.md</code>, it will be automatically created after merging to <code>master</code>.</li> <li>If your changes are about documentation. Run <code>poetry run mkdocs serve</code> to serve documentation locally and check whether there is any warning or error.</li> <li>Send a pull request \ud83d\ude4f</li> </ol>"},{"location":"customization/","title":"Customization","text":"<p>Customizing commitizen is not hard at all. We have two different ways to do so.</p>"},{"location":"customization/#1-customize-in-configuration-file","title":"1. Customize in configuration file","text":"<p>The basic steps are:</p> <ol> <li>Define your custom committing or bumping rules in the configuration file.</li> <li>Declare <code>name = \"cz_customize\"</code> in your configuration file, or add <code>-n cz_customize</code> when running commitizen.</li> </ol> <p>Example:</p> <pre><code>[tool.commitizen]\nname = \"cz_customize\"\n\n[tool.commitizen.customize]\nmessage_template = \"{{change_type}}:{% if show_message %} {{message}}{% endif %}\"\nexample = \"feature: this feature enable customize through config file\"\nschema = \"&lt;type&gt;: &lt;body&gt;\"\nschema_pattern = \"(feature|bug fix):(\\\\s.*)\"\nbump_pattern = \"^(break|new|fix|hotfix)\"\nbump_map = {\"break\" = \"MAJOR\", \"new\" = \"MINOR\", \"fix\" = \"PATCH\", \"hotfix\" = \"PATCH\"}\nchange_type_order = [\"BREAKING CHANGE\", \"feat\", \"fix\", \"refactor\", \"perf\"]\ninfo_path = \"cz_customize_info.txt\"\ninfo = \"\"\"\nThis is customized info\n\"\"\"\ncommit_parser = \"^(?P&lt;change_type&gt;feature|bug fix):\\\\s(?P&lt;message&gt;.*)?\"\nchangelog_pattern = \"^(feature|bug fix)?(!)?\"\nchange_type_map = {\"feature\" = \"Feat\", \"bug fix\" = \"Fix\"}\n\n[[tool.commitizen.customize.questions]]\ntype = \"list\"\nname = \"change_type\"\nchoices = [{value = \"feature\", name = \"feature: A new feature.\"}, {value = \"bug fix\", name = \"bug fix: A bug fix.\"}]\n# choices = [\"feature\", \"fix\"]  # short version\nmessage = \"Select the type of change you are committing\"\n\n[[tool.commitizen.customize.questions]]\ntype = \"input\"\nname = \"message\"\nmessage = \"Body.\"\n\n[[tool.commitizen.customize.questions]]\ntype = \"confirm\"\nname = \"show_message\"\nmessage = \"Do you want to add body message in commit?\"\n</code></pre> <p>The equivalent example for a json config file:</p> <pre><code>{\n\"commitizen\": {\n\"name\": \"cz_customize\",\n\"customize\": {\n\"message_template\": \"{{change_type}}:{% if show_message %} {{message}}{% endif %}\",\n\"example\": \"feature: this feature enable customize through config file\",\n\"schema\": \"&lt;type&gt;: &lt;body&gt;\",\n\"schema_pattern\": \"(feature|bug fix):(\\\\s.*)\",\n\"bump_pattern\": \"^(break|new|fix|hotfix)\",\n\"bump_map\": {\n\"break\": \"MAJOR\",\n\"new\": \"MINOR\",\n\"fix\": \"PATCH\",\n\"hotfix\": \"PATCH\"\n},\n\"change_type_order\": [\"BREAKING CHANGE\", \"feat\", \"fix\", \"refactor\", \"perf\"],\n\"info_path\": \"cz_customize_info.txt\",\n\"info\": \"This is customized info\",\n\"commit_parser\": \"^(?P&lt;change_type&gt;feature|bug fix):\\\\s(?P&lt;message&gt;.*)?\",\n\"changelog_pattern\": \"^(feature|bug fix)?(!)?\",\n\"change_type_map\": {\"feature\": \"Feat\", \"bug fix\": \"Fix\"},\n\"questions\": [\n{\n\"type\": \"list\",\n\"name\": \"change_type\",\n\"choices\": [\n{\n\"value\": \"feature\",\n\"name\": \"feature: A new feature.\"\n},\n{\n\"value\": \"bug fix\",\n\"name\": \"bug fix: A bug fix.\"\n}\n],\n\"message\": \"Select the type of change you are committing\"\n},\n{\n\"type\": \"input\",\n\"name\": \"message\",\n\"message\": \"Body.\"\n},\n{\n\"type\": \"confirm\",\n\"name\": \"show_message\",\n\"message\": \"Do you want to add body message in commit?\"\n}\n]\n}\n}\n}\n</code></pre> <p>And the correspondent example for a yaml json file:</p> <pre><code>commitizen:\nname: cz_customize\ncustomize:\nmessage_template: \"{{change_type}}:{% if show_message %} {{message}}{% endif %}\"\nexample: 'feature: this feature enable customize through config file'\nschema: \"&lt;type&gt;: &lt;body&gt;\"\nschema_pattern: \"(feature|bug fix):(\\\\s.*)\"\nbump_pattern: \"^(break|new|fix|hotfix)\"\ncommit_parser: \"^(?P&lt;change_type&gt;feature|bug fix):\\\\s(?P&lt;message&gt;.*)?\",\nchangelog_pattern: \"^(feature|bug fix)?(!)?\",\nchange_type_map:\nfeature: Feat\nbug fix: Fix\nbump_map:\nbreak: MAJOR\nnew: MINOR\nfix: PATCH\nhotfix: PATCH\nchange_type_order: [\"BREAKING CHANGE\", \"feat\", \"fix\", \"refactor\", \"perf\"]\ninfo_path: cz_customize_info.txt\ninfo: This is customized info\nquestions:\n- type: list\nname: change_type\nchoices:\n- value: feature\nname: 'feature: A new feature.'\n- value: bug fix\nname: 'bug fix: A bug fix.'\nmessage: Select the type of change you are committing\n- type: input\nname: message\nmessage: Body.\n- type: confirm\nname: show_message\nmessage: Do you want to add body message in commit?\n</code></pre>"},{"location":"customization/#customize-configuration","title":"Customize configuration","text":"Parameter Type Default Description <code>questions</code> <code>Questions</code> <code>None</code> Questions regarding the commit message. Detailed below. The type <code>Questions</code> is an alias to <code>Iterable[MutableMapping[str, Any]]</code> which is definied in <code>commitizen.defaults</code>. It expects a list of dictionaries. <code>message_template</code> <code>str</code> <code>None</code> The template for generating message from the given answers. <code>message_template</code> should either follow Jinja2 formatting specification, and all the variables in this template should be defined in <code>name</code> in <code>questions</code> <code>example</code> <code>str</code> <code>None</code> (OPTIONAL) Provide an example to help understand the style. Used by <code>cz example</code>. <code>schema</code> <code>str</code> <code>None</code> (OPTIONAL) Show the schema used. Used by <code>cz schema</code>. <code>schema_pattern</code> <code>str</code> <code>None</code> (OPTIONAL) The regular expression used to do commit message validation. Used by <code>cz check</code>. <code>info_path</code> <code>str</code> <code>None</code> (OPTIONAL) The path to the file that contains explanation of the commit rules. Used by <code>cz info</code>. If not provided <code>cz info</code>, will load <code>info</code> instead. <code>info</code> <code>str</code> <code>None</code> (OPTIONAL) Explanation of the commit rules. Used by <code>cz info</code>. <code>bump_map</code> <code>dict</code> <code>None</code> (OPTIONAL) Dictionary mapping the extracted information to a <code>SemVer</code> increment type (<code>MAJOR</code>, <code>MINOR</code>, <code>PATCH</code>) <code>bump_pattern</code> <code>str</code> <code>None</code> (OPTIONAL) Regex to extract information from commit (subject and body) <code>change_type_order</code> <code>str</code> <code>None</code> (OPTIONAL) List of strings used to order the Changelog. All other types will be sorted alphabetically. Default is <code>[\"BREAKING CHANGE\", \"Feat\", \"Fix\", \"Refactor\", \"Perf\"]</code> <code>commit_parser</code> <code>str</code> <code>None</code> (OPTIONAL) Regex to extract information used in creating changelog. See more <code>changelog_pattern</code> <code>str</code> <code>None</code> (OPTIONAL) Regex to understand which commits to include in the changelog <code>change_type_map</code> <code>dict</code> <code>None</code> (OPTIONAL) Dictionary mapping the type of the commit to a changelog entry"},{"location":"customization/#detailed-questions-content","title":"Detailed <code>questions</code> content","text":"Parameter Type Default Description <code>type</code> <code>str</code> <code>None</code> The type of questions. Valid type: <code>list</code>, <code>input</code> and etc. [See More][different-question-types] <code>name</code> <code>str</code> <code>None</code> The key for the value answered by user. It's used in <code>message_template</code> <code>message</code> <code>str</code> <code>None</code> Detail description for the question. <code>choices</code> <code>list</code> <code>None</code> (OPTIONAL) The choices when <code>type = list</code>. Either use a list of values or a list of dictionaries with <code>name</code> and <code>value</code> keys. Keyboard shortcuts can be defined via <code>key</code>. See examples above. <code>default</code> <code>Any</code> <code>None</code> (OPTIONAL) The default value for this question. <code>filter</code> <code>str</code> <code>None</code> (Optional) Validator for user's answer. (Work in Progress) [different-question-types]: https://github.com/tmbo/questionary#different-question-types"},{"location":"customization/#shortcut-keys","title":"Shortcut keys","text":"<p>When the <code>use_shortcuts</code> config option is enabled, commitizen can show and use keyboard shortcuts to select items from lists directly. For example, when using the <code>cz_conventional_commits</code> commitizen template, shortcut keys are shown when selecting the commit type. Unless otherwise defined, keyboard shortcuts will be numbered automatically. To specify keyboard shortcuts for your custom choices, provide the shortcut using the <code>key</code> parameter in dictionary form for each choice you would like to customize.</p>"},{"location":"customization/#2-customize-through-customizing-a-class","title":"2. Customize through customizing a class","text":"<p>The basic steps are:</p> <ol> <li>Inheriting from <code>BaseCommitizen</code></li> <li>Give a name to your rules.</li> <li>Expose the class at the end of your file assigning it to <code>discover_this</code></li> <li>Create a python package starting with <code>cz_</code> using <code>setup.py</code>, <code>poetry</code>, etc</li> </ol> <p>Check an example on how to configure <code>BaseCommitizen</code>.</p> <p>You can also automate the steps above through cookiecutter.</p> <pre><code>cookiecutter gh:commitizen-tools/commitizen_cz_template\n</code></pre> <p>See commitizen_cz_template for detail.</p>"},{"location":"customization/#custom-commit-rules","title":"Custom commit rules","text":"<p>Create a file starting with <code>cz_</code>, for example <code>cz_jira.py</code>. This prefix is used to detect the plug-in. Same method flask uses</p> <p>Inherit from <code>BaseCommitizen</code>, and you must define <code>questions</code> and <code>message</code>. The others are optional.</p> <pre><code>from commitizen.cz.base import BaseCommitizen\nfrom commitizen.defaults import Questions\n\nclass JiraCz(BaseCommitizen):\n    # Questions = Iterable[MutableMapping[str, Any]]\n    # It expects a list with dictionaries.\n    def questions(self) -&gt; Questions:\n\"\"\"Questions regarding the commit message.\"\"\"\n        questions = [\n            {\n                'type': 'input',\n                'name': 'title',\n                'message': 'Commit title'\n            },\n            {\n                'type': 'input',\n                'name': 'issue',\n                'message': 'Jira Issue number:'\n            },\n        ]\n        return questions\n\n    def message(self, answers: dict) -&gt; str:\n\"\"\"Generate the message with the given answers.\"\"\"\n        return '{0} (#{1})'.format(answers['title'], answers['issue'])\n\n    def example(self) -&gt; str:\n\"\"\"Provide an example to help understand the style (OPTIONAL)\n\n        Used by `cz example`.\n        \"\"\"\n        return 'Problem with user (#321)'\n\n    def schema(self) -&gt; str:\n\"\"\"Show the schema used (OPTIONAL)\n\n        Used by `cz schema`.\n        \"\"\"\n        return '&lt;title&gt; (&lt;issue&gt;)'\n\n    def info(self) -&gt; str:\n\"\"\"Explanation of the commit rules. (OPTIONAL)\n\n        Used by `cz info`.\n        \"\"\"\n        return 'We use this because is useful'\n\n\ndiscover_this = JiraCz  # used by the plug-in system\n</code></pre> <p>The next file required is <code>setup.py</code> modified from flask version.</p> <pre><code>from setuptools import setup\n\nsetup(\n    name='JiraCommitizen',\n    version='0.1.0',\n    py_modules=['cz_jira'],\n    license='MIT',\n    long_description='this is a long description',\n    install_requires=['commitizen']\n)\n</code></pre> <p>So in the end, we would have</p> <pre><code>.\n\u251c\u2500\u2500 cz_jira.py\n\u2514\u2500\u2500 setup.py\n</code></pre> <p>And that's it. You can install it without uploading to pypi by simply doing <code>pip install .</code></p> <p>If you feel like it should be part of this repo, create a PR.</p>"},{"location":"customization/#custom-bump-rules","title":"Custom bump rules","text":"<p>You need to define 2 parameters inside your custom <code>BaseCommitizen</code>.</p> Parameter Type Default Description <code>bump_pattern</code> <code>str</code> <code>None</code> Regex to extract information from commit (subject and body) <code>bump_map</code> <code>dict</code> <code>None</code> Dictionary mapping the extracted information to a <code>SemVer</code> increment type (<code>MAJOR</code>, <code>MINOR</code>, <code>PATCH</code>) <p>Let's see an example.</p> <pre><code>from commitizen.cz.base import BaseCommitizen\n\n\nclass StrangeCommitizen(BaseCommitizen):\n    bump_pattern = r\"^(break|new|fix|hotfix)\"\n    bump_map = {\"break\": \"MAJOR\", \"new\": \"MINOR\", \"fix\": \"PATCH\", \"hotfix\": \"PATCH\"}\n</code></pre> <p>That's it, your commitizen now supports custom rules, and you can run.</p> <pre><code>cz -n cz_strange bump\n</code></pre>"},{"location":"customization/#custom-changelog-generator","title":"Custom changelog generator","text":"<p>The changelog generator should just work in a very basic manner without touching anything. You can customize it of course, and this are the variables you need to add to your custom <code>BaseCommitizen</code>.</p> Parameter Type Required Description <code>commit_parser</code> <code>str</code> NO Regex which should provide the variables explained in the changelog description <code>changelog_pattern</code> <code>str</code> NO Regex to validate the commits, this is useful to skip commits that don't meet your ruling standards like a Merge. Usually the same as bump_pattern <code>change_type_map</code> <code>dict</code> NO Convert the title of the change type that will appear in the changelog, if a value is not found, the original will be provided <code>changelog_message_builder_hook</code> <code>method: (dict, git.GitCommit) -&gt; dict</code> NO Customize with extra information your message output, like adding links, this function is executed per parsed commit. Each GitCommit contains the following attrs: <code>rev</code>, <code>title</code>, <code>body</code>, <code>author</code>, <code>author_email</code> <code>changelog_hook</code> <code>method: (full_changelog: str, partial_changelog: Optional[str]) -&gt; str</code> NO Receives the whole and partial (if used incremental) changelog. Useful to send slack messages or notify a compliance department. Must return the full_changelog <pre><code>from commitizen.cz.base import BaseCommitizen\nimport chat\nimport compliance\n\nclass StrangeCommitizen(BaseCommitizen):\n    changelog_pattern = r\"^(break|new|fix|hotfix)\"\n    commit_parser = r\"^(?P&lt;change_type&gt;feat|fix|refactor|perf|BREAKING CHANGE)(?:\\((?P&lt;scope&gt;[^()\\r\\n]*)\\)|\\()?(?P&lt;breaking&gt;!)?:\\s(?P&lt;message&gt;.*)?\"\n    change_type_map = {\n        \"feat\": \"Features\",\n        \"fix\": \"Bug Fixes\",\n        \"refactor\": \"Code Refactor\",\n        \"perf\": \"Performance improvements\"\n    }\n\n    def changelog_message_builder_hook(self, parsed_message: dict, commit: git.GitCommit) -&gt; dict:\n        rev = commit.rev\n        m = parsed_message[\"message\"]\n        parsed_message[\"message\"] = f\"{m} {rev} [{commit.author}]({commit.author_email})\"\n        return parsed_message\n\n    def changelog_hook(self, full_changelog: str, partial_changelog: Optional[str]) -&gt; str:\n\"\"\"Executed at the end of the changelog generation\n\n        full_changelog: it's the output about to being written into the file\n        partial_changelog: it's the new stuff, this is useful to send slack messages or\n                           similar\n\n        Return:\n            the new updated full_changelog\n        \"\"\"\n        if partial_changelog:\n            chat.room(\"#committers\").notify(partial_changelog)\n        if full_changelog:\n            compliance.send(full_changelog)\n        full_changelog.replace(' fix ', ' **fix** ')\n        return full_changelog\n</code></pre>"},{"location":"customization/#raise-customize-exception","title":"Raise Customize Exception","text":"<p>If you want <code>commitizen</code> to catch your exception and print the message, you'll have to inherit <code>CzException</code>.</p> <pre><code>from commitizen.cz.exception import CzException\n\nclass NoSubjectProvidedException(CzException):\n    ...\n</code></pre>"},{"location":"exit_codes/","title":"Exit Codes","text":"<p>Commitizen handles expected exceptions through <code>CommitizenException</code> and returns different exit codes for different situations. They could be useful if you want to ignore specific errors in your pipeline.</p> <p>These exit codes can be found in <code>commitizen/exceptions.py::ExitCode</code>.</p> Exception Exit Code Description ExpectedExit 0 Expected exit DryRunExit 0 Exit due to passing <code>--dry-run</code> option NoCommitizenFoundException 1 Using a cz (e.g., <code>cz_jira</code>) that cannot be found in your system NotAGitProjectError 2 Not in a git project NoCommitsFoundError 3 No commit found NoVersionSpecifiedError 4 Version can not be found in configuration file NoPatternMapError 5 bump / changelog pattern or map can not be found in configuration file BumpCommitFailedError 6 Commit error when bumping version BumpTagFailedError 7 Tag error when bumping version NoAnswersError 8 No user response given CommitError 9 git commit error NoCommitBackupError 10 Commit back up file cannot be found NothingToCommitError 11 Nothing in staging to be committed CustomError 12 <code>CzException</code> raised NoCommandFoundError 13 No command found when running commitizen cli (e.g., <code>cz --debug</code>) InvalidCommitMessageError 14 The commit message does not pass <code>cz check</code> MissingConfigError 15 Configuration missed for <code>cz_customize</code> NoRevisionError 16 No revision found CurrentVersionNotFoundError 17 current version cannot be found in version_files InvalidCommandArgumentError 18 The argument provide to command is invalid (e.g. <code>cz check -commit-msg-file filename --rev-range master..</code>) InvalidConfigurationError 19 An error was found in the Commitizen Configuration, such as duplicates in <code>change_type_order</code> NotAllowed 20 <code>--incremental</code> cannot be combined with a <code>rev_range</code> NoneIncrementExit 21 The commits found are not eligible to be bumped CharacterSetDecodeError 22 The character encoding of the command output could not be determined GitCommandError 23 Unexpected failure while calling a git command"},{"location":"external_links/","title":"Resources","text":"<p>If you have written over commitizen, make a PR and add the link here \ud83d\udcaa</p>"},{"location":"external_links/#talks","title":"Talks","text":"Name Speaker Occasion Language Extra commitizen-tools: What can we gain from crafting a git message convention Wei Lee Taipey.py 2020 June Meetup, Remote Python Pizza 2020 English slides Automating release cycles Santiago Fraire PyAmsterdam June 24, 2020, Online English slides Automatizando Releases con Commitizen y Github Actions Santiago Fraire PyConAr 2020, Remote Espa\u00f1ol slides"},{"location":"external_links/#articles","title":"Articles","text":"<ul> <li>Python Table Manners - Commitizen: \u898f\u683c\u5316 commit message (Written in Traditional Mandarin)</li> <li>Automating semantic release with commitizen (English)</li> <li>How to Write Better Git Commit Messages \u2013 A Step-By-Step Guide (English)</li> </ul>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#support-for-pep621","title":"Support for PEP621","text":"<p>PEP621 establishes a <code>[project]</code> definition inside <code>pyproject.toml</code></p> <pre><code>[project]\nname = \"spam\"\nversion = \"2020.0.0\"\n</code></pre> <p>Commitizen won't use the <code>project.version</code> as a source of truth because it's a tool aimed for any kind of project.</p> <p>If we were to use it, it would increase the complexity of the tool. Also why wouldn't we support other project files like <code>cargo.toml</code> or <code>package.json</code>?</p> <p>Instead of supporting all the different project files, you can use <code>version_files</code> inside <code>[tool.commitizen]</code>, and it will cheaply keep any of these project files in sync</p> <pre><code>[tool.commitizen]\nversion = \"2.5.1\"\nversion_files = [\n\"pyproject.toml:^version\",\n\"cargo.toml:^version\",\n\"package.json:\\\"version\\\":\"\n]\n</code></pre>"},{"location":"faq/#why-are-revert-and-chore-valid-types-in-the-check-pattern-of-cz-conventional_commits-but-not-types-we-can-select","title":"Why are <code>revert</code> and <code>chore</code> valid types in the check pattern of cz conventional_commits but not types we can select?","text":"<p><code>revert</code> and <code>chore</code> are added to the \"pattern\" in <code>cz check</code> in order to prevent backward errors, but officially they are not part of conventional commits, we are using the latest types from Angular (they used to but were removed). However, you can create a customized <code>cz</code> with those extra types. (See Customization).</p> <p>See more discussion in issue #142 and #36</p>"},{"location":"faq/#how-to-revert-a-bump","title":"How to revert a bump?","text":"<p>If for any reason, the created tag and changelog were to be undone, this is the snippet:</p> <pre><code>git tag --delete &lt;created_tag&gt;\ngit reset HEAD~\ngit reset --hard HEAD\n</code></pre> <p>This will remove the last tag created, plus the commit containing the update to <code>.cz.toml</code> and the changelog generated for the version.</p> <p>In case the commit was pushed to the server you can remove it by running</p> <pre><code>git push --delete origin &lt;created_tag&gt;\n</code></pre>"},{"location":"faq/#is-this-project-affiliated-with-the-commitizen-js-project","title":"Is this project affiliated with the Commitizen JS project?","text":"<p>It is not affiliated.</p> <p>Both are used for similar purposes, parsing commits, generating changelog and version we presume. This one is written in python to make integration easier for python projects and the other serves the JS packages.</p> <p>They differ a bit in design, not sure if cz-js does any of this, but these are some of the stuff you can do with this repo (python's commitizen):</p> <ul> <li>create custom rules, version bumps and changelog generation, by default we use the popular conventional commits (I think cz-js allows this).</li> <li>single package, install one thing and it will work (cz-js is a monorepo, but you have to install different dependencies AFAIK)</li> <li>pre-commit integration</li> <li>works on any language project, as long as you create the <code>.cz.toml</code> file.</li> </ul> <p>Where do they cross paths?</p> <p>If you are using conventional commits in your git history, then you could swap one with the other in theory.</p> <p>Regarding the name, cz-js came first, they used the word commitizen first. When this project was created originally, the creator read \"be a good commitizen\", and thought it was just a cool word that made sense, and this would be a package that helps you be a good \"commit citizen\".</p>"},{"location":"faq/#how-to-handle-revert-commits","title":"How to handle revert commits?","text":"<pre><code>git revert --no-commit &lt;SHA&gt;\ngit commit -m \"revert: foo bar\"\n</code></pre>"},{"location":"faq/#i-got-exception-winerror-995-the-io-operation-error","title":"I got <code>Exception [WinError 995] The I/O operation ...</code> error","text":"<p>This error was caused by a Python bug on Windows. It's been fixed by this PR, and according to Python's changelog, 3.8.6rc1 and 3.9.0rc2 should be the accurate versions first contain this fix. In conclusion, upgrade your Python version might solve this issue.</p> <p>More discussion can be found in issue #318.</p>"},{"location":"faq/#why-does-commitizen-not-support-calver","title":"Why does commitizen not support CalVer?","text":"<p><code>commitizen</code> could support CalVer alongside SemVer, but in practice implementing CalVer creates numerous edge cases that are difficult to maintain (#385) and more generally mixing the two version schemes may not be a good idea. If CalVer or other custom versioning scheme is needed, <code>commitizen</code> could still be used to standardize commits and create changelogs, but a separate package should be used for version increments.</p> <p>Mixing CalVer and SemVer is generally not recommended because each versioning scheme serves a different purposes. Diverging from either specification can be confusing to users and cause errors with third party tools that don't expect the non-standard format.</p> <p>In the future, <code>commitizen</code> may support some implementation of CalVer, but at the time of writing, there are no plans to implement the feature (#173).</p> <p>If you would like to learn more about both schemes, there are plenty of good resources:</p> <ul> <li>Announcing CalVer</li> <li>API Versioning from Stripe</li> <li>Discussion about pip's use of CalVer</li> <li>Git Version Numbering</li> <li>SemVer vs. CalVer and Why I Use Both (but not at the same time)</li> <li>Semver Will Not Save You</li> <li>Why I Don't Like SemVer</li> </ul>"},{"location":"init/","title":"Init","text":"<p>For new projects, it is possible to run <code>cz init</code>.</p> <p>This command will prompt the user for information about the project and will configure the selected file type (<code>pyproject.toml</code>, <code>.cz.toml</code>, etc.).</p> <p>This will help you quickly set up your project with <code>commitizen</code>.</p> <p>Currently <code>init</code> is detecting</p> <ol> <li>Commit convention rules (<code>name</code>).</li> <li>Version detection based on the existing tags (<code>version</code>).</li> <li>Tag format, if your tag convention uses, for example <code>v*</code> in front of the version. (<code>tag_format</code>)</li> </ol> <p>We hope to detect the files where the version is also repeated eventually, like <code>package.json</code> or <code>__version__</code>.</p>"},{"location":"third-party-commitizen/","title":"Third-Party Commitizen Templates","text":""},{"location":"third-party-commitizen/#third-party-commitizen-templates","title":"Third-Party Commitizen Templates","text":"<p>In addition to the native templates, some alternative commit format templates are available as PyPI packages (installable with <code>pip</code>).</p>"},{"location":"third-party-commitizen/#conventional-jira","title":"Conventional JIRA","text":"<p>Just like conventional commit format, but the scope has been restricted to a JIRA issue format, i.e. <code>project-issueNumber</code>. This standardises scopes in a meaningful way.</p> <p>It can be installed with <code>pip install conventional-JIRA</code>.</p>"},{"location":"third-party-commitizen/#github-jira-conventional","title":"GitHub JIRA Conventional","text":"<p>This plugin extends the commitizen tools by: - requiring a JIRA issue id in the commit message - creating links to GitHub commits in the CHANGELOG.md - creating links to JIRA issues in the CHANGELOG.md</p> <p>It can be installed with <code>cz-github-jira-conventional</code>.</p> <p>For installation instructions (configuration and pre-commit) please visit https://github.com/apheris/cz-github-jira-conventional</p>"},{"location":"third-party-commitizen/#commitizen-emoji","title":"Commitizen emoji","text":"<p>Just like conventional commit format, but with emojis and optionally time spent and related tasks.</p> <p>It can be installed with <code>pip install commitizen-emoji</code>.</p> <p>Usage: <code>cz --name cz_commitizen_emoji commit</code>.</p>"},{"location":"third-party-commitizen/#conventional-legacy-cz_legacy","title":"Conventional Legacy (cz_legacy)","text":"<p>An extension of the conventional commit format to include user-specified legacy change types in the <code>CHANGELOG</code> while preventing the legacy change types from being used in new commit messages</p> <p><code>cz_legacy</code> can be installed with <code>pip install cz_legacy</code></p> <p>See the README for instructions on configuration</p>"},{"location":"tutorials/github_actions/","title":"Github Actions","text":""},{"location":"tutorials/github_actions/#create-a-new-release-with-github-actions","title":"Create a new release with Github Actions","text":""},{"location":"tutorials/github_actions/#automatic-bumping-of-version","title":"Automatic bumping of version","text":"<p>To execute <code>cz bump</code> in your CI, and push the new commit and the new tag, back to your master branch, we have to:</p> <ol> <li>Create a personal access token. Follow the instructions here. And copy the generated key</li> <li>Create a secret called <code>PERSONAL_ACCESS_TOKEN</code>, with the copied key, by going to your    project repository and then <code>Settings &gt; Secrets &gt; Add new secret</code>.</li> <li>In your repository create a new file <code>.github/workflows/bumpversion.yml</code>    with the following content.</li> </ol> <p>Warning</p> <p>If you use <code>GITHUB_TOKEN</code> instead of <code>PERSONAL_ACCESS_TOKEN</code>, the job won't trigger another workflow. It's like using <code>[skip ci]</code> in other CI's.</p> <pre><code>name: Bump version\n\non:\npush:\nbranches:\n- master\n\njobs:\nbump-version:\nif: \"!startsWith(github.event.head_commit.message, 'bump:')\"\nruns-on: ubuntu-latest\nname: \"Bump version and create changelog with commitizen\"\nsteps:\n- name: Check out\nuses: actions/checkout@v2\nwith:\ntoken: \"${{ secrets.PERSONAL_ACCESS_TOKEN }}\"\nfetch-depth: 0\n- name: Create bump and changelog\nuses: commitizen-tools/commitizen-action@master\nwith:\ngithub_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}\n</code></pre> <p>Push to master and that's it.</p>"},{"location":"tutorials/github_actions/#creating-a-github-release","title":"Creating a github release","text":"<p>You can modify the previous action.</p> <p>Add the variable <code>changelog_increment_filename</code> in the <code>commitizen-action</code>, specifying where to output the content of the changelog for the newly created version.</p> <p>And then add a step using a github action to create the release: <code>softprops/action-gh-release</code></p> <p>The commitizen action creates an env variable called <code>REVISION</code>, containing the newely created version.</p> <pre><code>- name: Create bump and changelog\nuses: commitizen-tools/commitizen-action@master\nwith:\ngithub_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}\nchangelog_increment_filename: body.md\n- name: Release\nuses: softprops/action-gh-release@v1\nwith:\nbody_path: \"body.md\"\ntag_name: ${{ env.REVISION }}\nenv:\nGITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n</code></pre>"},{"location":"tutorials/github_actions/#publishing-a-python-package","title":"Publishing a python package","text":"<p>Once the new tag is created, triggering an automatic publish command would be desired.</p> <p>In order to do so, the crendetial needs to be added with the information of our PyPI account.</p> <p>Instead of using username and password, we suggest using api token generated from PyPI.</p> <p>After generate api token, use the token as the PyPI password and <code>__token__</code> as the username.</p> <p>Go to <code>Settings &gt; Secrets &gt; Add new secret</code> and add the secret: <code>PYPI_PASSWORD</code>.</p> <p>Create a file in <code>.github/workflows/pythonpublish.yaml</code> with the following content:</p> <pre><code>name: Upload Python Package\n\non:\npush:\ntags:\n- \"*\" # Will trigger for every tag, alternative: 'v*'\n\njobs:\ndeploy:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v1\n- name: Set up Python\nuses: actions/setup-python@v1\nwith:\npython-version: \"3.x\"\n- name: Install dependencies\nrun: |\npython -m pip install --pre -U poetry\npoetry --version\npoetry install\n- name: Build and publish\nenv:\nPYPI_USERNAME: __token__\nPYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}\nrun: |\n./scripts/publish\n</code></pre> <p>Notice that we are calling a bash script in <code>./scripts/publish</code>, you should configure it with your tools (twine, poetry, etc.). Check commitizen example You can also use pypa/gh-action-pypi-publish to publish your package.</p> <p>Push the changes and that's it.</p>"},{"location":"tutorials/gitlab_ci/","title":"GitLab CI","text":""},{"location":"tutorials/gitlab_ci/#create-a-new-release-using-gitlab-ci","title":"Create a new release using GitLab CI","text":"<p>For this example, we have a <code>python/django</code> application and <code>Docker</code> as a containerization tool.</p> <p>Goal: Bump a new version every time that a change occurs on the <code>master</code> branch. The bump should be executed automatically by the <code>CI</code> process.</p>"},{"location":"tutorials/gitlab_ci/#development-workflow","title":"Development Workflow","text":"<ol> <li>A developer creates a new commit on any branch (except <code>master</code>)</li> <li>A developer creates a merge request (MR) against <code>master</code> branch</li> <li>When the <code>MR</code> is merged into master, the 2 stages of the CI are executed</li> <li>For simplification, we store the software version in a file called <code>VERSION</code>. You can use any file that you want as <code>commitizen</code> supports it.</li> <li>The commit message executed automatically by the <code>CI</code> must include <code>[skip-ci]</code> in the message; otherwise, the process will generate a loop. You can define the message structure in commitizen as well.</li> </ol>"},{"location":"tutorials/gitlab_ci/#gitlab-configuration","title":"Gitlab Configuration","text":"<p>To be able to change files and push new changes with <code>Gitlab CI</code> runners, we need to have a <code>ssh</code> key and configure a git user.</p> <p>First, let's create a <code>ssh key</code>. The only requirement is to create it without a passphrase:</p> <pre><code>ssh-keygen -f deploy_key -N \"\"\n</code></pre> <p>The previous command will create a private and public key under the files <code>deploy_key</code> and <code>deploy_key.pub</code>. We will use them later.</p> <p>For the git user, we need an email and username. You can choose whatever you want; in this example, we choose <code>ci-runner@myproject.com</code> and <code>admin</code>, respectively.</p> <p>Now, we need to create three environment variables that will be visible for the runners. They should be created in the <code>variables</code> section under <code>settings/ci_cd</code>:</p> <p></p> <p>Create <code>SSH_PRIVATE_KEY</code>, <code>CI_EMAIL</code>, <code>CI_USERNAME</code> variables, and fill them with the <code>private_key</code>, <code>email</code> and <code>username</code> that we have created previously.</p> <p>The latest step is to create a <code>deploy key.</code> To do this, we should create it under the section <code>settings/repository</code> and fill it with the <code>public key</code> generated before. Check <code>Write access allowed</code>; otherwise, the runner won't be able to write the changes to the repository.</p> <p></p> <p>If you have more projects under the same organization, you can reuse the deploy key created before, but you will have to repeat the step where we have created the environment variables (ssh key, email, and username).</p> <p>tip: If the CI raise some errors, try to unprotected the private key.</p>"},{"location":"tutorials/gitlab_ci/#defining-gitlab-ci-pipeline","title":"Defining GitLab CI Pipeline","text":"<ol> <li> <p>Create a <code>.gitlab-ci.yaml</code> file that contains <code>stages</code> and <code>jobs</code> configurations. You can find more info here.</p> </li> <li> <p>Define <code>stages</code> and <code>jobs</code>. For this example, we define two <code>stages</code> with one <code>job</code> each one.</p> </li> <li>Test the application.</li> <li>Auto bump the version. This means changing the file/s that reflects the version, creating a new commit and git tag.</li> </ol>"},{"location":"tutorials/gitlab_ci/#stages-and-jobs","title":"Stages and Jobs","text":"<pre><code>image: docker:latest\n\nservices:\n- docker:dind\n\nvariables:\nAPI_IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME\n\nbefore_script:\n- apk add --no-cache py-pip\n- pip install docker-compose\n\nstages:\n- test\n- auto-bump\n\ntest:\nstage: test\nscript:\n- docker-compose run -e DJANGO_ENVIRONMENT=dev your_project python manage.py test # run tests\n\nauto-bump:\nstage: auto-bump\nimage: python:3.6\nbefore_script:\n- \"which ssh-agent || ( apt-get update -qy &amp;&amp; apt-get install openssh-client -qqy )\"\n- eval `ssh-agent -s`\n- echo \"${SSH_PRIVATE_KEY}\" | tr -d '\\r' | ssh-add - &gt; /dev/null # add ssh key\n- pip3 install -U Commitizen # install commitizen\n- mkdir -p ~/.ssh\n- chmod 700 ~/.ssh\n- echo \"$SSH_PUBLIC_KEY\" &gt;&gt; ~/.ssh/id_rsa.pub\n- '[[ -f /.dockerenv ]] &amp;&amp; echo -e \"Host *\\n\\tStrictHostKeyChecking no\\n\\n\" &gt; ~/.ssh/config'\ndependencies:\n- test\nscript:\n- git remote set-url origin git@gitlab.com:discover/rentee-core.git # git configuration\n- git config --global user.email \"${CI_EMAIL}\" &amp;&amp; git config --global user.name \"${CI_USERNAME}\"\n- 'exists=`git show-ref refs/heads/master` &amp;&amp; if [ -n \"$exists\" ]; then git branch -D master; fi'\n- git checkout -b master\n- cz bump # execute auto bump and push to master\n- git push origin master:$CI_COMMIT_REF_NAME\n- TAG=$(head -n 1 VERSION) # get the new software version and save into artifacts\n- echo \"#!/bin/sh\" &gt;&gt; variables\n- echo \"export TAG='$TAG'\" &gt;&gt; variables\n- git push origin $TAG\nonly:\nrefs:\n- master\nartifacts:\npaths:\n- variables\n</code></pre> <p>So, every time that a developer push to any branch, the <code>test</code> job is executed. If the branch is <code>master</code> and the test jobs success, the <code>auto-bump</code> takes place. To be able to push using the Gitlab runner, we have to set the ssh key, configure git, and finally execute the auto bump.</p> <p>After merging the new changed into master, we have the final result:</p> <p></p>"},{"location":"tutorials/jenkins_pipeline/","title":"Create a new release with Jenkins Pipelines","text":"<p>For this we are using the modern approach of declarative pipelines.</p> <p>You must also ensure your jenkins instance supports docker. Most modern jenkins systems do have support for it, they have embraced it.</p> <pre><code>pipeline {\nagent {\nany\n}\nenvironment {\nCI = 'true'\n}\nstages {\nstage('Bump version') {\nwhen {\nbeforeAgent true\nbranch 'master'\nnot {\nchangelog '^bump:.+'\n}\n}\nsteps {\nscript {\nuseCz {\nsh \"cz bump --changelog\"\n}\n// Here push back to your repository the new commit and tag\n}\n}\n}\n}\n}\n\ndef useCz(String authorName = 'Jenkins CI Server', String authorEmail = 'your-jenkins@email.com', String image =  'registry.hub.docker.com/commitizen/commitizen:latest', Closure body) {\ndocker\n.image(image)\n.inside(\"-u 0 -v $WORKSPACE:/workspace -w /workspace -e GIT_AUTHOR_NAME='${authorName}' -e GIT_AUTHOR_EMAIL='${authorEmail}'\") {\nsh \"git config --global user.email '${authorName}'\"\nsh \"git config --global user.name '${authorEmail}'\"\nbody()\n}\n}\n</code></pre> <p>Warning</p> <p>Using jenkins pipeline with any git plugin may require many different configurations, you'll have to tinker with it until your pipelines properly detects git events. Check your webhook in your git repository and check the \"behaviors\" and \"build strategies\" in your pipeline settings.</p>"},{"location":"tutorials/writing_commits/","title":"Writing commits","text":"<p>For this project to work well in your pipeline, a commit convention must be followed.</p> <p>By default commitizen uses the known conventional commits, but you can create your own following the docs information over at customization.</p>"},{"location":"tutorials/writing_commits/#conventional-commits","title":"Conventional commits","text":"<p>If you are using conventional commits, the most important thing to know is that you must begin your commits with at least one of these tags: <code>fix</code>, <code>feat</code>. And if you introduce a breaking change, then, you must add to your commit body the following <code>BREAKING CHANGE</code>. Using these 3 keywords will allow the proper identification of the semantic version. Of course, there are other keywords, but I'll leave it to the reader to explore them.</p>"},{"location":"tutorials/writing_commits/#writing-commits","title":"Writing commits","text":"<p>Now to the important part, when writing commits, it's important to think about:</p> <ul> <li>Your future self</li> <li>Your colleagues</li> </ul> <p>You may think this is trivial, but it's not. It's important for the reader to understand what happened.</p>"},{"location":"tutorials/writing_commits/#recommendations","title":"Recommendations","text":"<ul> <li>Keep the message short: Makes the list of commits more readable (~50 chars).</li> <li>Talk imperative: Follow this rule: <code>If applied, this commit will &lt;commit message&gt;</code></li> <li>Think about the CHANGELOG: Your commits will probably end up in the changelog   so try writing for it, but also keep in mind that you can skip sending commits to the   CHANGELOG by using different keywords (like <code>build</code>).</li> <li>Use a commit per new feature: if you introduce multiple things related to the same   commit, squash them. This is useful for auto-generating CHANGELOG.</li> </ul> Do's Don'ts <code>fix(commands): bump error when no user provided</code> <code>fix: stuff</code> <code>feat: add new commit command</code> <code>feat: commit command introduced</code>"}]}